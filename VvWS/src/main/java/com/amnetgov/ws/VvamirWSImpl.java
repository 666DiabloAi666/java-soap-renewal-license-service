package com.amnetgov.ws;

import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.UUID;
import javax.annotation.Resource;
import javax.jws.WebService;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.BindingType;
import javax.xml.ws.WebServiceContext;
import org.apache.cxf.interceptor.OutFaultInterceptors;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.mindrot.jbcrypt.BCrypt;

import com.amnetgov.data.AbnormalRequest;
import com.amnetgov.data.AspiranteBasicData;
import com.amnetgov.data.AspiranteImagesData;
import com.amnetgov.data.BiometricData;
import com.amnetgov.data.ClinicData;
import com.amnetgov.data.CrcData;
import com.amnetgov.data.CrcHw;
import com.amnetgov.data.CrcLightData;
import com.amnetgov.data.InitialCrcData;
import com.amnetgov.data.LoginData;
import com.amnetgov.data.PinData;
import com.amnetgov.data.ProcessData;
import com.amnetgov.data.PruebasData;
import com.amnetgov.data.SpecialistData;
import com.amnetgov.data.SpecialistsTest;
import com.amnetgov.enums.Category;
import com.amnetgov.enums.ProcessStatus;
import com.amnetgov.enums.VvEnums;
import com.amnetgov.exception.ErrorDetailsBean;
import com.amnetgov.exception.ValidationInterceptor;
import com.amnetgov.exception.VvException;
import com.amnetgov.gps.LanGps;
import com.amnetgov.pin.PinGenerator;
import com.google.gson.Gson;

/**
 * This class was generated by Apache CXF 3.1.4 2016-01-19T12:22:03.005-08:00
 * Generated source version: 3.1.4
 * 
 */
@WebService(serviceName = "VvamirWS", portName = "VvamirWS", targetNamespace = "http://amnetgov.com/", endpointInterface = "com.amnetgov.ws.VvamirWS")
@OutFaultInterceptors(classes = { ValidationInterceptor.class })
@BindingType(value = "http://www.w3.org/2003/05/soap/bindings/HTTP/")
public class VvamirWSImpl implements VvamirWS {

	private static final Logger logger = LogManager.getLogger(VvamirWSImpl.class.getName());

	// private static final Logger logger = LogManager.getRootLogger();

	@Resource
	WebServiceContext webServiceContext;

	private DataSource dataSource;
	private InitialContext initialContext = null;

	public VvamirWSImpl() throws NamingException {
		if (logger.isInfoEnabled()) {
			logger.info("Executing DataSource connection in VvDataProcess constructor");
		}
		initialContext = new InitialContext();
		dataSource = (DataSource) initialContext.lookup("java:/PostgresDS");
		/*
		 * SchemaFactory sf =
		 * SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI); Schema
		 * schema = sf.newSchema(new File("customer.xsd")); JAXBContext jc =
		 * JAXBContext.newInstance(Customer.class); Unmarshaller unmarshaller =
		 * jc.createUnmarshaller(); unmarshaller.setSchema(schema);
		 * unmarshaller.setEventHandler(new MyValidationEventHandler());
		 * Customer customer = (Customer) unmarshaller.unmarshal(new
		 * File("input.xml"));
		 */
	}

	/*
	 * PRIVATE METHOD CLOSES EACH SERVICES CONNECTION
	 */
	private void closeConnection(Connection conn, ResultSet resultSet, PreparedStatement preStatement) {
		try {
			if (resultSet != null)
				resultSet.close();
			if (preStatement != null)
				preStatement.close();
			if (conn != null)
				conn.close();
		} catch (SQLException ex) {
			logger.fatal(ex.getMessage(), ex);
			throw new RuntimeException(ex);
		}
	}

	/*
	 * VALIDATES SERVICE CALL FROM CRC
	 */
	private boolean validateCrc(Connection conn, InitialCrcData crcData) {
		logger.info("Executing operation findCRC in VvDataProcess");
		boolean active = false;
		boolean found = false;
		ResultSet resultSet = null;
		PreparedStatement preStatement = null;
		double returnedCrcLong = VvEnums.DISABLED.getValue();
		double returnedCrcLat = VvEnums.DISABLED.getValue();
		String validDistance = "";
		String returnedCrcUser = "";
		String returnedCrcPass = "";
		if ((!crcData.getCrcUser().isEmpty() && crcData.getCrcUser() != null)
				&& (!crcData.getCrcPass().isEmpty() && crcData.getCrcPass() != null))
			try {
				preStatement = conn.prepareStatement(
						"" + "SELECT tcrc.*,tconfig.param,tconfig.val " + "FROM crc_schema.tcrc,crc_schema.tconfig "
								+ "WHERE tcrc.crc_user=? AND tcrc.crc_pass=? AND tconfig.param=?");
				preStatement.setString(1, crcData.getCrcUser());
				preStatement.setString(2, crcData.getCrcPass());
				preStatement.setString(3, "max_crc_distance");
				resultSet = preStatement.executeQuery();
				while (resultSet != null && resultSet.next()) {
					returnedCrcUser = resultSet.getString("crc_user");
					returnedCrcPass = resultSet.getString("crc_pass");
					returnedCrcLong = resultSet.getDouble("crc_longtitude");
					returnedCrcLat = resultSet.getDouble("crc_latitude");
					crcData.setCrcStatus(resultSet.getInt("status"));
					validDistance = resultSet.getString("val");
				}
				if (validDistance == "" || validDistance.isEmpty()) {
					/*
					 * Max value for GRS distance is no configured
					 */
					faultAsErrorEvent(11005, crcData);
				}
				if (crcData.getCrcUser().equals(returnedCrcUser) && crcData.getCrcPass().equals(returnedCrcPass)) {
					found = true;
				}
				if (!found) {
					faultAsErrorEvent(11005, crcData);
				}
				if (crcData.getCrcStatus() == VvEnums.ACTIVE.getValue()) {
					active = true;
				}
				if (!active) {
					faultAsErrorEvent(11005, crcData);
				}
				if (crcData.getCrcLatitude() == 1000 && crcData.getCrcLongtitude() == 1000) {
					logEvent(11000, crcData);
				}
				if (crcData.getCrcLatitude() == 1001 && crcData.getCrcLongtitude() == 1001) {
					logEvent(11001, crcData);
				}
				LanGps gps = new LanGps();
				Double crcGpsResult = gps.distanceInMeter(returnedCrcLat, crcData.getCrcLatitude(), returnedCrcLong,
						crcData.getCrcLongtitude(), 0, 0);
				if (crcGpsResult >= Double.parseDouble(validDistance)) {
					logEvent(11002, crcData);
				}
			} catch (SQLException ex) {
				logger.fatal(ex.getMessage(), ex);
				throw new RuntimeException(ex);
			} finally {
				closeConnection(null, resultSet, preStatement);
			}
		return found && active; // must return valid instead found
	}

	/*
	 * VALIDATES SERVICE CALL FROM CRC
	 */
	private String checkSessionCode(Connection conn, CrcData crcData, int request) {
		logger.info("Executing operation findCRC in VvDataProcess");
		ResultSet resultSet = null;
		ResultSet resultSet2 = null;
		ResultSet resultSet3 = null;
		ResultSet resultSet4 = null;
		PreparedStatement prepareStatement = null;
		PreparedStatement prepareStatement2 = null;
		PreparedStatement prepareStatement3 = null;
		PreparedStatement prepareStatement4 = null;
		String signature = null;
		StringBuffer hexString = null;
		List<String> sessionList = null;
		List<String> signatureList = null;
		if ((!crcData.getSessionCode().isEmpty() && crcData.getSessionCode() != null
				&& crcData.getSessionCode() != "")) {
			try {
				MessageDigest md = MessageDigest.getInstance("MD5");
				switch (request) {
				case 0:
					prepareStatement = conn
							.prepareStatement("SELECT crc_schema.tcrc_devices.signature,crc_schema.tlogin.session_id "
									+ "FROM crc_schema.tcrc_devices "
									+ "JOIN crc_schema.tcrc ON crc_schema.tcrc.crc_id = crc_schema.tcrc_devices.crc_id "
									+ "JOIN crc_schema.tlogin ON crc_schema.tcrc.crc_id = crc_schema.tcrc_devices.crc_id "
									+ "WHERE crc_schema.tcrc.crc_user =? AND crc_schema.tcrc.crc_pass=? "
									+ "AND crc_schema.tlogin.status <> 2 AND crc_schema.tcrc_devices.room ='SEC' AND tcrc_devices.signature IS NOT NULL AND tcrc_devices.state=? ");
					prepareStatement.setString(1, crcData.getCrcUser());
					prepareStatement.setString(2, crcData.getCrcPass());
					prepareStatement.setString(3, String.valueOf(VvEnums.ACTIVE.getValue()));
					resultSet = prepareStatement.executeQuery();
					sessionList = new ArrayList<String>();
					signatureList = new ArrayList<String>();
					while (resultSet != null && resultSet.next()) {
						signature = resultSet.getString("signature");
						signatureList.add(signature);
						sessionList.add(resultSet.getString("session_id"));
					}
					for (String sign : signatureList) {
						sign.toUpperCase();
						for (String session : sessionList) {
							String together = sign + session;
							md.update(together.getBytes());
							byte[] digest = md.digest();
							hexString = new StringBuffer();
							for (byte b : digest) {
								hexString.append(String.format("%02x", b & 0xff));
							}
							String Part1 = hexString.substring(0, 8);
							String Part2 = hexString.substring(8, 12);
							String Part3 = hexString.substring(12, 16);
							String Part4 = hexString.substring(16, 20);
							String Part5 = hexString.substring(20, 32);
							String mode = "";
							mode = Part1 + "-" + Part2 + "-" + Part3 + "-" + Part4 + "-" + Part5;
							if (mode.toLowerCase().equals(crcData.getSessionCode())) {
								closeConnection(null, resultSet, prepareStatement);
								return session;
							}
						}
					}
					closeConnection(null, resultSet, prepareStatement);
					break;
				case 1:
					sessionList = new ArrayList<String>();
					signatureList = new ArrayList<String>();
					closeConnection(null, resultSet, prepareStatement);
					prepareStatement2 = conn
							.prepareStatement("SELECT crc_schema.tcrc_devices.signature,crc_schema.tprocess.session_id "
									+ "FROM crc_schema.tcrc_devices "
									+ "JOIN crc_schema.tprocess ON crc_schema.tcrc_devices.crc_id = crc_schema.tprocess.crc_id "
									+ "WHERE tprocess.crc_id=(SELECT tcrc.crc_id FROM crc_schema.tcrc WHERE tcrc.crc_user=? AND tcrc.crc_pass=?) "
									+ "AND crc_schema.tprocess.estado=? AND tcrc_devices.state=? "
									+ "AND tcrc_devices.signature IS NOT NULL");
					prepareStatement2.setString(1, crcData.getCrcUser());
					prepareStatement2.setString(2, crcData.getCrcPass());
					prepareStatement2.setString(3, ProcessStatus.PRUMED.name());
					prepareStatement2.setString(4, String.valueOf(VvEnums.ACTIVE.getValue()));
					resultSet2 = prepareStatement2.executeQuery();
					while (resultSet2 != null && resultSet2.next()) {
						signature = resultSet2.getString("signature");
						signatureList.add(signature);
						sessionList.add(resultSet2.getString("session_id"));
					}
					for (String sign : signatureList) {
						sign.toUpperCase();
						for (String session : sessionList) {
							String together = sign + session;
							md.update(together.getBytes());
							byte[] digest = md.digest();
							hexString = new StringBuffer();
							for (byte b : digest) {
								hexString.append(String.format("%02x", b & 0xff));
							}
							String Part1 = hexString.substring(0, 8);
							String Part2 = hexString.substring(8, 12);
							String Part3 = hexString.substring(12, 16);
							String Part4 = hexString.substring(16, 20);
							String Part5 = hexString.substring(20, 32);
							String mode = "";
							mode = Part1 + "-" + Part2 + "-" + Part3 + "-" + Part4 + "-" + Part5;
							if (mode.toLowerCase().equals(crcData.getSessionCode())) {
								closeConnection(null, resultSet2, prepareStatement2);
								return session;
							}
						}
					}
					closeConnection(null, resultSet2, prepareStatement2);
					break;
				case 2:
					prepareStatement3 = conn
							.prepareStatement("SELECT crc_schema.tcrc_devices.signature,crc_schema.tlogin.session_id "
									+ "FROM crc_schema.tcrc_devices "
									+ "JOIN crc_schema.tcrc ON crc_schema.tcrc.crc_id = crc_schema.tcrc_devices.crc_id "
									+ "JOIN crc_schema.tlogin ON crc_schema.tcrc.crc_id = crc_schema.tcrc_devices.crc_id "
									+ "WHERE crc_schema.tcrc.crc_user =? AND crc_schema.tcrc.crc_pass=? "
									+ "AND crc_schema.tlogin.status <> 2 AND crc_schema.tcrc_devices.room ='SEC' AND tcrc_devices.signature IS NOT NULL AND tcrc_devices.state=?");
					prepareStatement3.setString(1, crcData.getCrcUser());
					prepareStatement3.setString(2, crcData.getCrcPass());
					prepareStatement3.setInt(3, VvEnums.ACTIVE.getValue());
					resultSet3 = prepareStatement3.executeQuery();
					sessionList = new ArrayList<String>();
					signatureList = new ArrayList<String>();
					while (resultSet3 != null && resultSet3.next()) {
						signature = resultSet3.getString("signature");
						signatureList.add(signature);
						sessionList.add(resultSet3.getString("session_id"));
					}
					for (String sign : signatureList) {
						sign.toUpperCase();
						for (String session : sessionList) {
							String together = sign + session;
							md.update(together.getBytes());
							byte[] digest = md.digest();
							hexString = new StringBuffer();
							for (byte b : digest) {
								hexString.append(String.format("%02x", b & 0xff));
							}
							String Part1 = hexString.substring(0, 8);
							String Part2 = hexString.substring(8, 12);
							String Part3 = hexString.substring(12, 16);
							String Part4 = hexString.substring(16, 20);
							String Part5 = hexString.substring(20, 32);
							String mode = "";
							mode = Part1 + "-" + Part2 + "-" + Part3 + "-" + Part4 + "-" + Part5;
							if (mode.toLowerCase().equals(crcData.getSessionCode2())) {
								closeConnection(null, resultSet3, prepareStatement3);
								return session;
							}
						}
					}
					closeConnection(null, resultSet3, prepareStatement3);
					break;
				// MANAGER CERTIFICATORY
				case 3:
					prepareStatement4 = conn
							.prepareStatement("SELECT crc_schema.tcrc_devices.signature,crc_schema.tlogin.session_id "
									+ "FROM crc_schema.tcrc_devices "
									+ "JOIN crc_schema.tcrc ON crc_schema.tcrc.crc_id = crc_schema.tcrc_devices.crc_id "
									+ "JOIN crc_schema.tlogin ON crc_schema.tcrc.crc_id = crc_schema.tcrc_devices.crc_id "
									+ "WHERE crc_schema.tcrc.crc_user =? AND crc_schema.tcrc.crc_pass=? "
									+ "AND crc_schema.tlogin.status <> 2 AND crc_schema.tcrc_devices.room ='CERTIFICADOR' AND tcrc_devices.signature IS NOT NULL");
					prepareStatement4.setString(1, crcData.getCrcUser());
					prepareStatement4.setString(2, crcData.getCrcPass());
					resultSet4 = prepareStatement4.executeQuery();
					sessionList = new ArrayList<String>();
					signatureList = new ArrayList<String>();
					while (resultSet4 != null && resultSet4.next()) {
						signature = resultSet4.getString("signature");
						signatureList.add(signature);
						sessionList.add(resultSet4.getString("session_id"));
					}
					for (String sign : signatureList) {
						sign.toUpperCase();
						for (String session : sessionList) {
							String together = sign + session;
							md.update(together.getBytes());
							byte[] digest = md.digest();
							hexString = new StringBuffer();
							for (byte b : digest) {
								hexString.append(String.format("%02x", b & 0xff));
							}
							String Part1 = hexString.substring(0, 8);
							String Part2 = hexString.substring(8, 12);
							String Part3 = hexString.substring(12, 16);
							String Part4 = hexString.substring(16, 20);
							String Part5 = hexString.substring(20, 32);
							String mode = "";
							mode = Part1 + "-" + Part2 + "-" + Part3 + "-" + Part4 + "-" + Part5;
							if (mode.toLowerCase().equals(crcData.getSessionCode())) {
								closeConnection(null, resultSet4, prepareStatement4);
								return session;
							}
						}
					}
					closeConnection(null, resultSet, prepareStatement);
					break;
				}
			} catch (SQLException | NoSuchAlgorithmException ex) {
				logger.fatal(ex.getMessage(), ex);
				throw new RuntimeException(ex);
			}
		}
		return null;
	}

	/*
	 * VALIDATES SERVICE CALL FROM CRC
	 * 
	 * private boolean validateCrc(Connection conn, CrcData crcObject) {
	 * logger.info("Executing operation findCRC in VvDataProcess"); boolean
	 * found = false; boolean valid = false; ResultSet resultSet = null;
	 * PreparedStatement preStatement = null; double returnedCrcLong = 0; double
	 * returnedCrcLat = 0; double validDistance = 0; String returnedCrcUser =
	 * ""; String returnedCrcPass = ""; if ((!crcObject.getCrcUser().isEmpty()
	 * && crcObject.getCrcUser() != null) && (!crcObject.getCrcPass().isEmpty()
	 * && crcObject.getCrcPass() != null)) try { preStatement =
	 * conn.prepareStatement(
	 * "SELECT * FROM crc_schema.tcrc,crc_schema.tconfig WHERE crc_user=? AND crc_pass=? "
	 * ); preStatement.setString(1, crcObject.getCrcUser());
	 * preStatement.setString(2, crcObject.getCrcPass()); resultSet =
	 * preStatement.executeQuery(); while (resultSet != null &&
	 * resultSet.next()) { returnedCrcUser = resultSet.getString("crc_user");
	 * returnedCrcPass = resultSet.getString("crc_pass"); returnedCrcLong =
	 * resultSet.getDouble("crc_longtitude"); returnedCrcLat =
	 * resultSet.getDouble("crc_latitude"); validDistance =
	 * resultSet.getDouble("distance"); if
	 * (crcObject.getCrcUser().equals(returnedCrcUser) &&
	 * crcObject.getCrcPass().equals(returnedCrcPass)) found = true; } if
	 * (found) { if (validDistance <=
	 * LanGps.distance(crcObject.getCrcLatitude(), crcObject.getCrcLongtitude(),
	 * returnedCrcLat, returnedCrcLong, 'K')) { // throw error } } } catch
	 * (SQLException ex) { logger.error(ex.getMessage(), ex); throw new
	 * RuntimeException(ex); } finally { closeConnection(null, resultSet,
	 * preStatement); } return found; // must return valid instead found }
	 */

	private VvException faultAsWarningEvent(int errorCode, InitialCrcData crcData) {
		Connection conn = null;
		ResultSet resultSet = null;
		PreparedStatement preStatement = null;
		ErrorDetailsBean _faultBean = null;
		VvException _exception = null;
		try {
			conn = dataSource.getConnection();
			preStatement = conn.prepareStatement("SELECT * FROM crc_schema.texception WHERE code_id=?");
			preStatement.setInt(1, errorCode);
			resultSet = preStatement.executeQuery();
			while (resultSet != null && resultSet.next()) {
				_faultBean = new ErrorDetailsBean();
				_faultBean.setErrorCode(errorCode);
				_faultBean.setErrorMessage("" + "CRC name:" + crcData.getCrcName() + "\nCRC Municipal Location:"
						+ crcData.getMunicipalLocation() + "\nCRC Address :" + crcData.getAddress() + "\nCRC Latitude :"
						+ crcData.getCrcLatitude() + "\nCRC Longtitude :" + crcData.getCrcLongtitude()
						+ "\nCRC Latitude :" + crcData.getCrcLatitude() + "\nException message : "
						+ resultSet.getString("message"));
				_exception = new VvException(_faultBean.getErrorMessage(), _faultBean);
			}
		} catch (SQLException ex) {
			logger.fatal(ex.getMessage(), ex);
			throw new RuntimeException(ex);
		} finally {
			closeConnection(conn, resultSet, preStatement);
		}
		logger.warn(_faultBean.getErrorCode(), _exception);
		return _exception;
	}

	private void detectCrc(Connection conn, InitialCrcData crcData) {
		ResultSet resultSet = null;
		PreparedStatement preStatement = null;
		/*
		 * STORING CRC ID WHERE OCCURES LAST EVENT
		 */
		try {
			preStatement = conn.prepareStatement(
					"UPDATE crc_schema.tservice_events SET crc_id=(SELECT tcrc.crc_id FROM crc_schema.tcrc WHERE tcrc.crc_user=? AND tcrc.crc_pass=?) "
							+ "WHERE tservice_events.event_id = (SELECT max(tservice_events.event_id) FROM crc_schema.tservice_events)");
			preStatement.setString(1, crcData.getCrcUser());
			preStatement.setString(2, crcData.getCrcPass());
			preStatement.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			closeConnection(null, resultSet, preStatement);

		}
	}

	private VvException faultAsErrorEvent(int errorCode, InitialCrcData crcData) {
		Connection conn = null;
		ResultSet resultSet = null;
		PreparedStatement preStatement = null;
		ErrorDetailsBean _faultBean = null;
		VvException _exception = null;
		int crcId = 0;
		try {
			conn = dataSource.getConnection();
			preStatement = conn.prepareStatement("SELECT * FROM crc_schema.texception WHERE code_id=?");
			preStatement.setInt(1, errorCode);
			resultSet = preStatement.executeQuery();
			while (resultSet != null && resultSet.next()) {
				_faultBean = new ErrorDetailsBean();
				_faultBean.setErrorCode(errorCode);
				_faultBean.setErrorMessage(resultSet.getString("message"));
				_exception = new VvException(_faultBean.getErrorMessage(), _faultBean);
			}
		} catch (SQLException ex) {
			logger.fatal(ex.getMessage(), ex);
			detectCrc(conn, crcData);
			throw new RuntimeException(ex);
		} finally {
			logger.error(_faultBean.getErrorCode(), _exception);
			detectCrc(conn, crcData);
			closeConnection(conn, resultSet, preStatement);
		}
		return _exception;
	}

	private void logEvent(int errorCode, InitialCrcData crcData) {
		Connection conn = null;
		ResultSet resultSet = null;
		PreparedStatement preStatement = null;
		ErrorDetailsBean _faultBean = null;
		try {
			conn = dataSource.getConnection();
			preStatement = conn.prepareStatement("SELECT * FROM crc_schema.texception WHERE code_id=?");
			preStatement.setInt(1, errorCode);
			resultSet = preStatement.executeQuery();
			while (resultSet != null && resultSet.next()) {
				_faultBean = new ErrorDetailsBean();
				_faultBean.setErrorCode(errorCode);
				_faultBean.setErrorMessage(resultSet.getString("message"));
			}
		} catch (SQLException ex) {
			logger.fatal(ex.getMessage(), ex);
			detectCrc(conn, crcData);
			throw new RuntimeException(ex);
		} finally {
			logger.error(errorCode);
			detectCrc(conn, crcData);
			closeConnection(conn, resultSet, preStatement);
		}
	}

	private VvException faultAsAuthorizedEvent(int errorCode, CrcData crcData) {
		Connection conn = null;
		ResultSet resultSet = null;
		PreparedStatement preStatement = null;
		ErrorDetailsBean _faultBean = null;
		VvException _exception = null;
		try {
			conn = dataSource.getConnection();
			preStatement = conn.prepareStatement("SELECT * FROM crc_schema.texception WHERE code_id=?");
			preStatement.setInt(1, errorCode);
			resultSet = preStatement.executeQuery();
			while (resultSet != null && resultSet.next()) {
				_faultBean = new ErrorDetailsBean();
				_faultBean.setErrorCode(errorCode);
				_faultBean.setErrorMessage(resultSet.getString("message"));
				_exception = new VvException(_faultBean.getErrorMessage(), _faultBean);
			}
		} catch (SQLException ex) {
			logger.fatal(_faultBean.getErrorMessage(), _exception);
			detectCrc(conn, crcData);
			throw new RuntimeException(ex);
		} finally {
			logger.error(_faultBean.getErrorCode(), _exception);
			detectCrc(conn, crcData);
			closeConnection(conn, resultSet, preStatement);
		}
		return _exception;
	}

	/*
	 * InitialProcessSession - 3.42
	 * 
	 * @Override public String initialProcessSession(InitialCrcData crcData)
	 * throws VvException { logger.info(
	 * "Executing operation initialProcessSession in VvamirWSImpl"); String
	 * returned = ""; Connection conn = null; ResultSet resultSet = null;
	 * PreparedStatement preStatement = null; try { if (!validateCrc(crcData)) {
	 * throw getAuthFault(12001); } conn = dataSource.getConnection();
	 * preStatement = conn .prepareStatement(
	 * "INSERT INTO crc_schema.tprocess (session_id) values(?) returning session_id"
	 * ); preStatement.setObject(1, UUID.randomUUID()); resultSet =
	 * preStatement.executeQuery(); while (resultSet != null &&
	 * resultSet.next()) { returned = resultSet.getString("session_id"); } if
	 * (returned == "" || returned.isEmpty()) { ErrorDetailsBean faultBean = new
	 * ErrorDetailsBean(); faultBean.setErrorCode(12301);
	 * faultBean.setErrorMessage("New Session Initialization error"); throw new
	 * VvException("New session Initialization fault", faultBean); } } catch
	 * (SQLException ex) { System.out.println(ex); // throw new
	 * RuntimeException(ex.getMessage()); } finally { closeConnection(conn,
	 * resultSet, preStatement); } return returned; }
	 */

	/*
	 * TESTED 1 . GENERATES PIN NUMBER
	 */
	@Override
	public PinData requestPaymentPin(CrcData crcData, String numIdent, double paymentValue, int paymentType)
			throws VvException {
		logger.info("Executing operation generatePinProcess in VvamirWSImpl");
		PinData pinData = null;
		Connection conn = null;
		ResultSet resultSet = null;
		PreparedStatement preStatement = null;
		AspiranteBasicData basicData = null;
		String userSession = "";
		boolean processIsOpen = false;
		Long pinNumber;
		try {
			conn = dataSource.getConnection();
			userSession = checkSessionCode(conn, crcData, VvEnums.SECRETARY_SESSION.getValue());
			if (!validateCrc(conn, crcData)) {
				crcData.setSessionId(userSession);
				throw faultAsAuthorizedEvent(12002, crcData);

			}
			if (userSession.isEmpty() || userSession == "") {
				throw faultAsAuthorizedEvent(12352, crcData);
			}
			switch (paymentType) {
			/*
			 * CASH USE
			 */
			case 0:
				break;
			/*
			 * BANK TRANSFER MONEY USE
			 */
			case 1:
				// 12311 - error if nothing transfered
				break;
			/*
			 * POSTAL SERVICE USE
			 */
			case 3:
				// 12313 - error if nothing paid by postal code
				break;
			}
			preStatement = conn.prepareStatement("SELECT * FROM crc_schema.tcandidate JOIN crc_schema.tprocess "
					+ "ON crc_schema.tprocess.num_ident=crc_schema.tcandidate.num_ident "
					+ "WHERE crc_schema.tcandidate.num_ident =? "
					+ "ORDER BY crc_schema.tprocess.process_id DESC LIMIT 1");
			preStatement.setString(1, numIdent);
			resultSet = preStatement.executeQuery();
			if (resultSet != null && resultSet.next()) {
				basicData = new AspiranteBasicData();
				basicData.setCategoria(resultSet.getString("categoria"));
				basicData.setDeptoResidencia(resultSet.getString("depto_residencia"));
				basicData.setDireccion(resultSet.getString("direccion"));
				basicData.setEmail(resultSet.getString("email"));
				basicData.setEstadoCivil(resultSet.getInt("estado_civil"));
				basicData.setFecExpDocumento(resultSet.getString("fec_exp_documento"));
				basicData.setFecNacimiento(resultSet.getString("fec_nacimiento"));
				basicData.setGradoEscolaridad(resultSet.getInt("grado_escolaridad"));
				basicData.setGrupoSanguineo(resultSet.getInt("grupo_sanguineo"));
				basicData.setLugarNacimiento(resultSet.getString("lugar_nacimiento"));
				basicData.setLugExpDocumento(resultSet.getString("lug_exp_documento"));
				basicData.setMobile(resultSet.getString("movil"));
				basicData.setMuniResidencia(resultSet.getString("muni_residencia"));
				basicData.setNombreAcompanante(resultSet.getString("nombre_acompanante"));
				basicData.setTelAcompanante(resultSet.getString("telefono_acompanante"));
				basicData.setPrimerApellido(resultSet.getString("primer_apellido"));
				basicData.setPrimerNombre(resultSet.getString("primer_nombre"));
				basicData.setSegundoApellido(resultSet.getString("segundo_apellido"));
				basicData.setSegundoNombre(resultSet.getString("segundo_nombre"));
				basicData.setSegundaCategoria(resultSet.getString("segunda_categoria"));
				basicData.setSexo(resultSet.getString("sexo"));
				basicData.setObjectivo(resultSet.getInt("objectivo"));
				basicData.setTelefono(resultSet.getString("telefono"));
				basicData.setTipoIdent(resultSet.getString("tipo_ident"));
				basicData.setNumIdent(numIdent);
				basicData.setTramite(resultSet.getInt("tramite"));
				basicData.setSegundoTramite(resultSet.getInt("segundo_tramite"));
				basicData.setEpsArs(resultSet.getInt("eps_ars"));
				basicData.setOcupacion(resultSet.getInt("ocupacion"));
				basicData.setHuella_izg(resultSet.getString("huella_izg"));
				basicData.setHuella_der(resultSet.getString("huella_der"));
				basicData.setCiudadNacimiento(resultSet.getString("ciudad_nacimiento"));
				basicData.setEstadoCivil(resultSet.getInt("estado_civil"));
				basicData.setCiudadExpedicion(resultSet.getString("ciudad_expedicion"));

				// if process exist with status 'opened'
				if (resultSet.getString("estado").equals("prumed")) {
					processIsOpen = true;
					pinData = new PinData();
					pinData.setPinNumber(resultSet.getLong("pin"));
					pinData.setSessionId(resultSet.getString("session_id"));
					pinData.setBasicData(basicData);
				}
			}
			if (!processIsOpen) {
				closeConnection(null, resultSet, preStatement);
				pinNumber = PinGenerator.getPIN();
				preStatement = conn.prepareStatement(
						"INSERT INTO crc_schema.tprocess (num_ident,val_payment,pin,session_id,crc_id,specialist_id) "
								+ "VALUES (?,?,?,?,"
								+ "(SELECT crc_id FROM crc_schema.tcrc WHERE crc_user=? AND crc_pass=?),"
								+ "(SELECT specialist_id FROM crc_schema.tlogin WHERE session_id=?::uuid)) RETURNING session_id");
				preStatement.setString(1, numIdent);
				preStatement.setDouble(2, paymentValue);
				preStatement.setLong(3, pinNumber);
				preStatement.setObject(4, UUID.randomUUID());
				preStatement.setString(5, crcData.getCrcUser());
				preStatement.setString(6, crcData.getCrcPass());
				preStatement.setString(7, userSession);
				resultSet = preStatement.executeQuery();
				while (resultSet != null && resultSet.next()) {
					pinData = new PinData();
					pinData.setPinNumber(pinNumber);
					pinData.setSessionId(resultSet.getString("session_id"));
					pinData.setBasicData(basicData);
				}
			}
			if (pinData.equals(null)) {
				throw faultAsAuthorizedEvent(12344, crcData);
			}

		} catch (SQLException ex) {
			logger.fatal(ex.getMessage(), ex);
			detectCrc(conn, crcData);
			throw new RuntimeException(ex);
		} finally {
			closeConnection(conn, resultSet, preStatement);
		}
		return pinData;
	}

	/*
	 * TESTED 2 . REGISTER BASIC PROCESS INFO 3.3
	 */
	@Override
	public String sendAspiranteBasicData(CrcData crcData, AspiranteBasicData aspiranteBasicData, int request)
			throws VvException {
		logger.info("Executing operation sendAspiranteBasicData in VvamirWSImpl");
		String sessionId = null;
		Connection conn = null;
		ResultSet resultSet = null;
		PreparedStatement preStatement = null;
		DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		String processSessionReturned = "";
		int processComdoIndicator = VvEnums.DISABLED.getValue();
		try {
			conn = dataSource.getConnection();
			if (!validateCrc(conn, crcData)) {
				throw faultAsAuthorizedEvent(12003, crcData);
			}
			Date birthDate, expirationDocDate = null;
			birthDate = dateFormat.parse(aspiranteBasicData.getFecNacimiento());
			expirationDocDate = dateFormat.parse(aspiranteBasicData.getFecExpDocumento());

			switch (request) {
			case 0:
				// !!!!! - PEREPISAT MUST DYNAMIC QUERY UPDATE
				// ONLY FIELDS NEW
				// DATA
				preStatement = conn.prepareStatement("UPDATE crc_schema.tcandidate SET primer_apellido=?,"
						+ "segundo_apellido=?," + "primer_nombre=?," + "segundo_nombre=?," + "fec_nacimiento=?,"
						+ "sexo=?," + "grupo_sanguineo=?,telefono=?," + "fec_exp_documento=?," + "lug_exp_documento=?,"
						+ "depto_residencia=?," + "muni_residencia=?,direccion=?,grado_escolaridad=?,movil=?,email=?,"
						+ "lugar_nacimiento=?,nombre_acompanante=?,telefono_acompanante=?,eps_ars=?,"
						+ "ocupacion=?,tipo_ident=?,ciudad_nacimiento=?,ciudad_expedicion=?,estatura=?,estado_civil=? WHERE num_ident=?");
				preStatement.setString(1, aspiranteBasicData.getPrimerApellido());
				preStatement.setString(2, aspiranteBasicData.getSegundoApellido());
				preStatement.setString(3, aspiranteBasicData.getPrimerNombre());
				preStatement.setString(4, aspiranteBasicData.getSegundoNombre());
				preStatement.setTimestamp(5, new Timestamp(birthDate.getTime()));
				preStatement.setString(6, aspiranteBasicData.getSexo());
				preStatement.setInt(7, aspiranteBasicData.getGrupoSanguineo());
				preStatement.setString(8, aspiranteBasicData.getTelefono());
				preStatement.setTimestamp(9, new Timestamp(expirationDocDate.getTime()));
				preStatement.setString(10, aspiranteBasicData.getLugExpDocumento());
				preStatement.setString(11, aspiranteBasicData.getDeptoResidencia());
				preStatement.setString(12, aspiranteBasicData.getMuniResidencia());
				preStatement.setString(13, aspiranteBasicData.getDireccion());
				preStatement.setInt(14, aspiranteBasicData.getGradoEscolaridad());
				preStatement.setString(15, aspiranteBasicData.getMobile());
				preStatement.setString(16, aspiranteBasicData.getEmail());
				preStatement.setString(17, aspiranteBasicData.getLugarNacimiento());
				preStatement.setString(18, aspiranteBasicData.getNombreAcompanante());
				preStatement.setString(19, aspiranteBasicData.getTelAcompanante());
				preStatement.setInt(20, aspiranteBasicData.getEpsArs());
				preStatement.setInt(21, aspiranteBasicData.getOcupacion());
				preStatement.setString(22, aspiranteBasicData.getTipoIdent());
				preStatement.setString(23, aspiranteBasicData.getCiudadNacimiento());
				preStatement.setString(24, aspiranteBasicData.getCiudadExpedicion());
				preStatement.setDouble(25, aspiranteBasicData.getEstatura());
				preStatement.setInt(26, aspiranteBasicData.getEstadoCivil());
				preStatement.setString(27, aspiranteBasicData.getNumIdent());
				if (preStatement.executeUpdate() == VvEnums.NOT_UPDATED.getValue()) {
					throw faultAsAuthorizedEvent(12346, crcData);
				}
				closeConnection(null, resultSet, preStatement);
				break;

			case 1:
				preStatement = conn.prepareStatement("INSERT INTO crc_schema.tcandidate"
						+ "(num_ident,tipo_ident,primer_apellido," + "segundo_apellido,primer_nombre,segundo_nombre,"
						+ "fec_nacimiento,sexo,grupo_sanguineo," + "telefono,fec_exp_documento,lug_exp_documento,"
						+ "depto_residencia,muni_residencia,direccion,grado_escolaridad,"
						+ "movil,email,lugar_nacimiento,nombre_acompanante,telefono_acompanante,estado_civil,eps_ars,ocupacion,ciudad_nacimiento,ciudad_expedicion,estatura) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
				preStatement.setString(1, aspiranteBasicData.getNumIdent());
				preStatement.setString(2, aspiranteBasicData.getTipoIdent());
				preStatement.setString(3, aspiranteBasicData.getPrimerApellido());
				preStatement.setString(4, aspiranteBasicData.getSegundoApellido());
				preStatement.setString(5, aspiranteBasicData.getPrimerNombre());
				preStatement.setString(6, aspiranteBasicData.getSegundoNombre());
				preStatement.setTimestamp(7, new Timestamp(birthDate.getTime()));
				preStatement.setString(8, aspiranteBasicData.getSexo());
				preStatement.setInt(9, aspiranteBasicData.getGrupoSanguineo());
				preStatement.setString(10, aspiranteBasicData.getTelefono());
				preStatement.setTimestamp(11, new Timestamp(expirationDocDate.getTime()));
				preStatement.setString(12, aspiranteBasicData.getLugExpDocumento());
				preStatement.setString(13, aspiranteBasicData.getDeptoResidencia());
				preStatement.setString(14, aspiranteBasicData.getMuniResidencia());
				preStatement.setString(15, aspiranteBasicData.getDireccion());
				preStatement.setInt(16, aspiranteBasicData.getGradoEscolaridad());
				preStatement.setString(17, aspiranteBasicData.getMobile());
				preStatement.setString(18, aspiranteBasicData.getEmail());
				preStatement.setString(19, aspiranteBasicData.getLugarNacimiento());
				preStatement.setString(20, aspiranteBasicData.getNombreAcompanante());
				preStatement.setString(21, aspiranteBasicData.getTelAcompanante());
				preStatement.setInt(22, aspiranteBasicData.getEstadoCivil());
				preStatement.setInt(23, aspiranteBasicData.getEpsArs());
				preStatement.setInt(24, aspiranteBasicData.getOcupacion());
				preStatement.setString(25, aspiranteBasicData.getCiudadNacimiento());
				preStatement.setString(26, aspiranteBasicData.getCiudadExpedicion());
				preStatement.setDouble(27, aspiranteBasicData.getEstatura());
				if (preStatement.executeUpdate() == VvEnums.NOT_UPDATED.getValue()) {
					throw faultAsAuthorizedEvent(12345, crcData);
				}
				closeConnection(null, resultSet, preStatement);
				break;
			}
			/*  */
			processSessionReturned = checkSessionCode(conn, crcData, 1);
			/*  */
			/*
			 * CHECK IF PROCESS COMBO AND UPDATE PROCESS
			 */
			if (aspiranteBasicData.getSegundaCategoria() != null) {
				processComdoIndicator = VvEnums.COMBO.getValue();
			}

			if (aspiranteBasicData.getCategoria() == Category.A1.name()
					|| aspiranteBasicData.getCategoria() == Category.A2.name()) {
				/*
				 * PROCESS ONLY SECOND CATEGORY (A2 OR A1)
				 */
				processComdoIndicator = VvEnums.BIKE_ONLY.getValue();
			}

			preStatement = conn.prepareStatement(
					"UPDATE crc_schema.tprocess SET process_combo=?,resultado_examen=?,segundo_resultado_examen=?,session_id=?,servicio=?,tramite=?,categoria=?,objectivo=?,"
							+ "validacion_manual=?,segundo_tramite=?,segunda_categoria=? "
							+ "WHERE session_id=?::uuid AND num_ident=? RETURNING session_id;--",
					PreparedStatement.RETURN_GENERATED_KEYS);
			preStatement.setInt(1, processComdoIndicator);
			preStatement.setInt(2, 0); // resultado_examen
			preStatement.setInt(3, 0); // segundo_resultado_examen
			preStatement.setObject(4, UUID.randomUUID());
			preStatement.setLong(5, aspiranteBasicData.getServicio());
			preStatement.setLong(6, aspiranteBasicData.getTramite());
			preStatement.setString(7, aspiranteBasicData.getCategoria());
			preStatement.setLong(8, aspiranteBasicData.getObjectivo());
			preStatement.setLong(9, aspiranteBasicData.getValidacionManual());
			preStatement.setLong(10, aspiranteBasicData.getSegundoTramite());
			preStatement.setString(11, aspiranteBasicData.getSegundaCategoria());
			preStatement.setString(12, processSessionReturned);
			preStatement.setString(13, aspiranteBasicData.getNumIdent());
			preStatement.executeUpdate();
			resultSet = preStatement.getGeneratedKeys();
			while (resultSet != null && resultSet.next()) {
				sessionId = resultSet.getString("session_id");
			}
			if (sessionId == null) {
				crcData.setSessionId(processSessionReturned);
				throw faultAsAuthorizedEvent(12347, crcData);
			}
		} catch (SQLException | ParseException ex) {
			logger.fatal(ex.getMessage(), ex);
			detectCrc(conn, crcData);
			throw new RuntimeException(ex);
		} finally {
			closeConnection(conn, resultSet, preStatement);
		}
		return sessionId;
	}

	/*
	 * TESTED 3 . saveImagesProcess - SAVE PICTURES BY PROCESS ID 3.31
	 */
	@Override
	public String sendAspiranteImagesData(CrcData crcData, AspiranteImagesData aspiranteImagesData) throws VvException {
		logger.info("Executing operation saveImagesProcess in VvamirWSImpl");
		Connection conn = null;
		ResultSet resultSet = null;
		PreparedStatement preStatement = null;
		String userNewSession = "";
		String processSessionReturned = "";
		String loginSessionReturned = "";
		try {

			/*
			 * String finger = aspiranteImagesData.getHuellaIzg();
			 * 
			 * File file = new File("filename.txt");
			 * 
			 * // if file doesnt exists, then create it if (!file.exists()) {
			 * file.createNewFile(); }
			 * 
			 * FileWriter fw = new FileWriter(file.getAbsoluteFile());
			 * BufferedWriter bw = new BufferedWriter(fw); bw.write(finger);
			 * bw.close();
			 */

			conn = dataSource.getConnection();
			if (!validateCrc(conn, crcData)) {
				throw faultAsAuthorizedEvent(12004, crcData);
			}
			/*   */
			processSessionReturned = checkSessionCode(conn, crcData, VvEnums.PROCESS_SESSION.getValue());
			/*   */
			preStatement = conn.prepareStatement(
					"UPDATE crc_schema.tcandidate SET photograph=?,huella_izg=?,huella_der=?,firma=? WHERE crc_schema.tcandidate.num_ident=(SELECT num_ident FROM crc_schema.tprocess WHERE session_id=?::uuid)");
			preStatement.setString(1, aspiranteImagesData.getPhotograph());
			preStatement.setString(2, aspiranteImagesData.getHuellaIzg());
			preStatement.setString(3, aspiranteImagesData.getHuellaDer());
			preStatement.setString(4, aspiranteImagesData.getFirma());
			preStatement.setString(5, processSessionReturned);
			if (preStatement.executeUpdate() == VvEnums.NOT_UPDATED.getValue()) {
				throw faultAsAuthorizedEvent(12316, crcData);
			}
			closeConnection(null, resultSet, preStatement);
			if (processSessionReturned == "" || processSessionReturned.isEmpty()) {
				crcData.setSessionId(processSessionReturned);
				throw faultAsAuthorizedEvent(12348, crcData);
			}
			loginSessionReturned = checkSessionCode(conn, crcData, VvEnums.PROCESS_LOGIN_SESSION.getValue());
			if (loginSessionReturned == "" || loginSessionReturned.isEmpty()) {
				crcData.setSessionId(processSessionReturned);
				throw faultAsAuthorizedEvent(12348, crcData);
			}
			preStatement = conn.prepareStatement(
					"UPDATE crc_schema.tlogin SET session_id=?::uuid WHERE session_id=?::uuid RETURNING session_id;--",
					Statement.RETURN_GENERATED_KEYS);
			preStatement.setObject(1, UUID.randomUUID());
			preStatement.setString(2, loginSessionReturned);
			preStatement.executeUpdate();
			resultSet = preStatement.getGeneratedKeys();
			while (resultSet != null && resultSet.next()) {
				userNewSession = resultSet.getString("session_id");
			}

			if (userNewSession == "" || userNewSession.isEmpty() || userNewSession.equals(null)) {
				crcData.setSessionId(processSessionReturned);
				throw faultAsAuthorizedEvent(12349, crcData);
			}
		} catch (SQLException ex) {
			logger.fatal(ex.getMessage(), ex);
			detectCrc(conn, crcData);
			throw new RuntimeException(ex);
		} finally {
			closeConnection(conn, resultSet, preStatement);
		}
		return userNewSession; // 0 - OK
	}

	/*
	 * TESTED SELECTS FINTERS CANDIDATES vs SPECIALISTS or CERTIFICATORS or
	 * SECRETARIES
	 */
	@Override
	public BiometricData selectFingersProcess(CrcLightData crcLightData, String combinedParam, int request)
			throws VvException {
		logger.info("Executing operation selectFingersProcess in VvamirWSImpl");
		BiometricData _returned = null;
		/*
		 * 3.39 - FIRST TIME MUST RETURN FINGERS OF SPECIALIST AND CANDIDATE BY
		 * SESSION_START_ID OR SESSION_END_ID AND PROCESS_ID
		 */
		Connection conn = null;
		ResultSet resultSet = null;
		PreparedStatement preStatement = null;
		try {
			CrcData crcData = new CrcData();
			crcData.setCrcUser(crcLightData.getCrcUser());
			crcData.setCrcPass(crcLightData.getCrcPass());
			crcData.setCrcLatitude(crcLightData.getCrcLatitude());
			crcData.setCrcLongtitude(crcLightData.getCrcLongtitude());
			conn = dataSource.getConnection();
			if (!validateCrc(conn, crcData)) {
				throw faultAsAuthorizedEvent(12005, crcData);
			}
			switch (request) {
			case 0:
			case 1:
				preStatement = conn.prepareStatement(
						"SELECT left_finger,right_finger,crc_schema.tcandidate.huella_izg,crc_schema.tcandidate.huella_der "
								+ "FROM crc_schema.tpeople AS people "
								+ "JOIN crc_schema.ttest ON  people.specialist_id=crc_schema.ttest.specialist_id "
								+ "JOIN crc_schema.tprocess ON crc_schema.ttest.process_id = crc_schema.tprocess.process_id "
								+ "JOIN crc_schema.tcandidate ON crc_schema.tprocess.num_ident=crc_schema.tcandidate.num_ident "
								+ "WHERE (crc_schema.ttest.start_seg =?::uuid OR crc_schema.ttest.end_seg =?::uuid)");
				preStatement.setString(1, combinedParam);
				preStatement.setString(2, combinedParam);
				resultSet = preStatement.executeQuery();
				while (resultSet != null && resultSet.next()) {
					_returned = new BiometricData();
					_returned.setAspiranteHuellaIzq(resultSet.getString("huella_izg"));
					_returned.setAspiranteHuellaDer(resultSet.getString("huella_der"));
					_returned.setSpecialistHuellaIzq(resultSet.getString("left_finger"));
					_returned.setSpecialisteHuellaDer(resultSet.getString("right_finger"));
				}
				break;
			/*
			 * 3.49 RETURN FINGERS OF CERTIFICATOR - BY SESSION_ID IN PROCESS
			 * RECORD
			 */
			case 2:
				preStatement = conn.prepareStatement("SELECT " + "tcertificator.left_finger,"
						+ "tcertificator.right_finger" + " FROM crc_schema.tcertificator"
						+ " WHERE tcertificator.certificator_id IN" + " (SELECT tcertificator.certificator_id"
						+ " FROM crc_schema.tprocess" + " WHERE certificador_seguimiento =?::uuid)");
				preStatement.setString(1, combinedParam);
				resultSet = preStatement.executeQuery();
				while (resultSet != null && resultSet.next()) {
					_returned = new BiometricData();
					_returned.setSpecialistHuellaIzq(resultSet.getString("left_finger"));
					_returned.setSpecialisteHuellaDer(resultSet.getString("right_finger"));
				}
				break;
			// Secretary Fingers only
			case 3:
				preStatement = conn.prepareStatement("SELECT " + "tpeople.left_finger," + "tpeople.right_finger"
						+ " FROM crc_schema.tpeople" + " WHERE username =?");
				preStatement.setString(1, combinedParam);
				resultSet = preStatement.executeQuery();
				while (resultSet != null && resultSet.next()) {
					_returned = new BiometricData();
					_returned.setSpecialistHuellaIzq(resultSet.getString("left_finger"));
					_returned.setSpecialisteHuellaDer(resultSet.getString("right_finger"));
				}
				break;
			}
			if (_returned.equals(null)) {
				throw faultAsAuthorizedEvent(12317, crcData);
			}
		} catch (SQLException ex) {
			logger.fatal(ex.getMessage(), ex);
			throw new RuntimeException(ex);
		} finally {
			closeConnection(conn, resultSet, preStatement);
		}
		return _returned;
	}

	/*
	 * SAVES FINGERS PRINTS IDENTIFICATION RESULTS
	 */
	@Override
	public int reportResultdoIdentification(CrcLightData crcLightData, String IdSeguimiento, int estado,
			int errorDetails, int request) throws VvException {
		logger.info("Executing operation reportTestsResultdoIdentificationProcess in VvamirWSImpl");
		int response = VvEnums.RESPONSE_OK.getValue();
		Connection conn = null;
		ResultSet resultSet = null;
		PreparedStatement preStatement = null;
		int processComboIndicator = VvEnums.DEFAULT.getValue();
		int resultCategoria1 = VvEnums.DEFAULT.getValue();
		int resultCategoria2 = VvEnums.DEFAULT.getValue();
		String statusProcess = "";
		Calendar calendar = Calendar.getInstance();
		Date now = calendar.getTime();
		Timestamp timeNow = new Timestamp(now.getTime());
		try {
			CrcData crcData = new CrcData();
			crcData.setCrcUser(crcLightData.getCrcUser());
			crcData.setCrcPass(crcLightData.getCrcPass());
			crcData.setCrcLatitude(crcLightData.getCrcLatitude());
			crcData.setCrcLongtitude(crcLightData.getCrcLongtitude());
			conn = dataSource.getConnection();
			if (!validateCrc(conn, crcData)) {
				throw faultAsAuthorizedEvent(12006, crcData);
			}
			/*
			 * SAVES TEST fingers verification result with START SESSION ID -
			 * 3.36 a and 3.36 b
			 */
			switch (request) {
			// END TEST
			case 0:
				preStatement = conn.prepareStatement(
						"UPDATE crc_schema.ttest SET estado_ver_end=?,ver_details_end=? WHERE end_seg=?::uuid");
				preStatement.setInt(1, estado);
				preStatement.setInt(2, errorDetails);
				preStatement.setString(3, IdSeguimiento);
				if (preStatement.executeUpdate() == VvEnums.NOT_UPDATED.getValue()) {
					response = VvEnums.RESPONSE_BAD.getValue();
					throw faultAsAuthorizedEvent(12318, crcData);
				}
				break;
			// START TEST
			case 1:
				preStatement = conn.prepareStatement(
						"UPDATE crc_schema.ttest SET estado_ver_start=?,ver_details_start=? WHERE start_seg=?::uuid");
				preStatement.setInt(1, estado);
				preStatement.setInt(2, errorDetails);
				preStatement.setString(3, IdSeguimiento);
				if (preStatement.executeUpdate() == VvEnums.NOT_UPDATED.getValue()) {
					response = VvEnums.RESPONSE_BAD.getValue();

					throw faultAsAuthorizedEvent(12318, crcData);
				}
				break;

			/*
			 * CERTIFICATOD APPORVES HIS TEMPORALY RESULT FOR CATEGORY
			 */
			case 2:
				// IF FINGERS OK
				if (estado == VvEnums.VERIFICATION_OK.getValue()) {
					logger.info("Executing operation Certificator Resultado Identification");
					preStatement = conn.prepareStatement(
							"SELECT estado,resultado_examen,segundo_resultado_examen,process_combo FROM crc_schema.tprocess WHERE certificador_seguimiento=?::uuid ");
					preStatement.setString(1, IdSeguimiento);
					resultSet = preStatement.executeQuery();
					while (resultSet != null && resultSet.next()) {
						statusProcess = resultSet.getString("estado");
						processComboIndicator = resultSet.getInt("process_combo");
						resultCategoria1 = resultSet.getInt("resultado_examen");
						resultCategoria2 = resultSet.getInt("segundo_resultado_examen");
					}

					// IF PROCESS COMBO
					if (processComboIndicator == VvEnums.COMBO.getValue()) {
						// PREPARE CHANGE STATUS "READY TO RUNT"
						if ((resultCategoria1 != VvEnums.DEFAULT.getValue()
								&& resultCategoria2 != VvEnums.DEFAULT.getValue())
								&& statusProcess.equals(ProcessStatus.VERPRB.name())) {
							statusProcess = ProcessStatus.CERPRU.name();
						}
					}
					if (processComboIndicator == VvEnums.DEFAULT.getValue()) {
						statusProcess = ProcessStatus.CERPRU.name();
					}

					closeConnection(null, resultSet, preStatement);
					preStatement = conn.prepareStatement(
							"UPDATE crc_schema.tprocess SET estado=?,certificador_ver=?,ver_details=?,fec_certification=? WHERE certificador_seguimiento=?::uuid");
					preStatement.setString(1, statusProcess); // CHANGES
					preStatement.setInt(2, VvEnums.VERIFICATION_OK.getValue());
					preStatement.setInt(3, errorDetails);
					preStatement.setTimestamp(4, timeNow);
					preStatement.setString(5, IdSeguimiento);
					if (preStatement.executeUpdate() == VvEnums.NOT_UPDATED.getValue()) {
						response = VvEnums.RESPONSE_BAD.getValue();
						throw faultAsAuthorizedEvent(12319, crcData);
					}
				}
				// IF FINGERS BAD -THEN clean UNVERIFIED Temporal Decision of
				// Certificatory
				else {
					logger.info("Executing operation Certificator Resultado Identification");
					preStatement = conn.prepareStatement(
							"UPDATE crc_schema.tprocess SET " + "observations=?,segundo_observations=?,"
									+ "resultado_examen=?,segundo_resultado_examen=?,"
									+ "categoria_final=?,segundo_categoria_final=?,certificador_ver=?,ver_details=? "
									+ "WHERE certificador_seguimiento=?::uuid");
					preStatement.setString(1, null); // observations
					preStatement.setString(2, null); // segundo_observations
					preStatement.setInt(3, VvEnums.DEFAULT.getValue()); // resultado_examen
					preStatement.setInt(4, VvEnums.DEFAULT.getValue()); // segundo_resultado_examen
					preStatement.setString(5, null); // categoria_final
					preStatement.setString(6, null); // segundo_categoria_final
					preStatement.setInt(7, VvEnums.VERIFICATION_FAILED.getValue()); // certificador_ver
					preStatement.setInt(8, errorDetails);
					preStatement.setString(9, IdSeguimiento);
					if (preStatement.executeUpdate() == VvEnums.NOT_UPDATED.getValue()) {
						response = VvEnums.RESPONSE_BAD.getValue();
						throw faultAsAuthorizedEvent(12319, crcData);
					}
				}
				break;
			}
		} catch (SQLException ex) {
			response = VvEnums.RESPONSE_BAD.getValue();
			logger.fatal(ex.getMessage(), ex);
			throw new RuntimeException(ex);
		} finally {
			closeConnection(conn, resultSet, preStatement);
		}
		return response; // SUCCESS
	}

	/*
	 * UpdateSpecialistaData - 3.58.1
	 */
	@Override
	public int updateSpecialistaData(CrcData crcData, SpecialistData specialistData, int actionType)
			throws VvException {
		logger.info("Executing operation updateSpecialistaData in VvamirWSImpl");
		int response = VvEnums.RESPONSE_OK.getValue();
		Connection conn = null;
		ResultSet resultSet = null;
		PreparedStatement preStatement = null;
		String userSession = "";
		Calendar calendar = Calendar.getInstance();
		Date now = calendar.getTime();
		Timestamp updateTime = new Timestamp(now.getTime());
		try {
			/*
			 * CHECKS USER SESSION LOGIN
			 */
			conn = dataSource.getConnection();
			userSession = checkSessionCode(conn, crcData, VvEnums.SECRETARY_SESSION.getValue());
			if (!validateCrc(conn, crcData)) {
				crcData.setSessionId(userSession);
				throw faultAsAuthorizedEvent(12007, crcData);
			}
			switch (actionType) {
			// Registration new user and his status 1 - not active until
			// approved by SOCIST
			/*
			 * case 0: preStatement = conn.prepareStatement(
			 * "INSERT INTO crc_schema.tpeople (first_name,last_name,username,password,photograph,left_finger,right_finger,status,status_time,crc_id) "
			 * +
			 * "VALUES (?,?,?,?,?,?,?,(SELECT crc_id FROM crc_schema.tcrc WHERE crc_user=? AND crc_pass=?))"
			 * );
			 * 
			 * preStatement.setString(1, specialistData.getFirstName());
			 * preStatement.setString(2, specialistData.getLastName());
			 * preStatement.setString(3, specialistData.getUsername());
			 * preStatement.setString(4, specialistData.getPassword());
			 * preStatement.setString(5, specialistData.getPhotograph());
			 * preStatement.setString(6, specialistData.getLeftFinger());
			 * preStatement.setString(7, specialistData.getRightFingure());
			 * preStatement.setInt(8,1);
			 * preStatement.setTimestamp(9,whenStatusChanged);
			 * preStatement.setString(10, crcData.getCrcUser());
			 * preStatement.setString(11, crcData.getCrcPass()); resultSet =
			 * preStatement.executeQuery(); if (!resultSet.next()) { response =
			 * 1; crcData.setSessionId(userSession); throw
			 * faultAsAuthorizedEvent(12320, crcData); } break; // Update
			 * Existing user
			 */ case 1:
				preStatement = conn.prepareStatement(
						"UPDATE crc_schema.tpeople SET last_update=?,username=?,password=?,photograph=?,left_finger=?,right_finger=? WHERE username=? AND password=?");
				preStatement.setTimestamp(1, updateTime);
				preStatement.setString(2, specialistData.getUsername());
				preStatement.setString(3, specialistData.getPassword());
				preStatement.setString(4, specialistData.getPhotograph());
				preStatement.setString(5, specialistData.getLeftFinger());
				preStatement.setString(6, specialistData.getRightFingure());
				preStatement.setString(7, specialistData.getUsernameOld());
				preStatement.setString(8, specialistData.getPasswordOld());
				int result = preStatement.executeUpdate();
				if (result == VvEnums.NOT_UPDATED.getValue()) {
					response = VvEnums.RESPONSE_BAD.getValue();
					crcData.setSessionId(userSession);
					throw faultAsAuthorizedEvent(12321, crcData);
				}
				if (result == VvEnums.UPDATED.getValue()) {
					System.out.println("updateSpecialistaData WHY ?");
				}
				break;
			}

		} catch (SQLException ex) {
			String message = "(username, crc_id)=(Opa, 1) already exists";
			if (ex.getMessage().toLowerCase().contains(message.toLowerCase())) {
				response = VvEnums.RESPONSE_BAD.getValue();
				crcData.setSessionId(userSession);
				throw faultAsAuthorizedEvent(12321, crcData);
			}
			throw new RuntimeException(ex);
		} finally {
			closeConnection(conn, resultSet, preStatement);
		}
		return response;
	}

	/*
	 * UserLogin 3.40
	 */
	@Override
	public SpecialistData userLogin(CrcData crcData, String username, String password) throws VvException {
		Connection conn = null;
		ResultSet resultSet = null;
		PreparedStatement preStatement = null;
		SpecialistData _returnedUserData = null;
		boolean userFound = false;
		String returnedSession = "";
		Calendar calendar = Calendar.getInstance();
		Date now = calendar.getTime();
		Timestamp loginTime = new Timestamp(now.getTime());
		String userSession = "";
		String specialistID = "";
		int crcOrClinit = 3;

		try {
			conn = dataSource.getConnection();
			/* SESSION CHECK */
			// Validation CRC FAULT
			if (!validateCrc(conn, crcData)) {
				crcData.setSessionId(userSession);
				throw faultAsAuthorizedEvent(12008, crcData);
			}
			preStatement = conn.prepareStatement(
					"SELECT location_type FROM crc_schema.tcrc WHERE crc_id =(SELECT crc_id FROM crc_schema.tcrc WHERE crc_user=? AND crc_pass=?)");
			preStatement.setString(1, crcData.getCrcUser());
			preStatement.setString(2, crcData.getCrcPass());
			resultSet = preStatement.executeQuery();
			while (resultSet != null && resultSet.next()) {
				crcOrClinit = resultSet.getInt("location_type");
			}
			// Validation CRC FAULT
			if (crcOrClinit == 3) {
				crcData.setSessionId(returnedSession);
				throw faultAsAuthorizedEvent(12028, crcData);
			}
			// Manager Certificatory
			else if (crcOrClinit == VvEnums.CERTIFICATORY_SESSION.getValue()) {
				returnedSession = checkSessionCode(conn, crcData, VvEnums.CERTIFICATORY_SESSION.getValue());
			}
			// Manager Secretary
			else if (crcOrClinit == VvEnums.SECRETARY_SESSION.getValue()) {
				returnedSession = checkSessionCode(conn, crcData, VvEnums.SECRETARY_SESSION.getValue());
			}

			if (returnedSession == "" || returnedSession == null) {
				crcData.setSessionId(returnedSession);
				throw faultAsAuthorizedEvent(12364, crcData);
			}
			closeConnection(null, resultSet, preStatement);
			preStatement = conn.prepareStatement("SELECT * FROM crc_schema.tpeople WHERE username=? AND password=? "
					+ "AND crc_id=(SELECT crc_id FROM crc_schema.tcrc WHERE crc_user=? AND crc_pass=?)");
			preStatement.setString(1, username);
			preStatement.setString(2, password);
			preStatement.setString(3, crcData.getCrcUser());
			preStatement.setString(4, crcData.getCrcPass());
			resultSet = preStatement.executeQuery();
			while (resultSet != null && resultSet.next()) {
				if (username.equals(resultSet.getString("username"))
						&& password.equals(resultSet.getString("password"))) {
					_returnedUserData = new SpecialistData();
					_returnedUserData.setUsername(resultSet.getString("username"));
					_returnedUserData.setSpecialistId(resultSet.getString("specialist_id"));
					_returnedUserData.setPhotograph(resultSet.getString("photograph"));
					_returnedUserData.setFirstName(resultSet.getString("first_name"));
					_returnedUserData.setLastName(resultSet.getString("last_name"));
					_returnedUserData.setLeftFinger(resultSet.getString("left_finger"));
					_returnedUserData.setRightFingure(resultSet.getString("right_finger"));
					_returnedUserData.setRole(resultSet.getString("role"));
					specialistID = resultSet.getString("specialist_id");
					userFound = true;
				}
			}
			if (!userFound) {
				crcData.setSessionId(returnedSession);
				throw faultAsAuthorizedEvent(12330, crcData);
			}
			if (userFound) {
				closeConnection(null, resultSet, preStatement);
				preStatement = conn
						.prepareStatement("UPDATE crc_schema.tlogin SET status=?,logout=? WHERE specialist_id=?::uuid");
				preStatement.setInt(1, VvEnums.DELETED.getValue());
				preStatement.setTimestamp(2, loginTime);
				preStatement.setString(3, specialistID);
				preStatement.executeUpdate();
				closeConnection(null, resultSet, preStatement);
				preStatement = conn.prepareStatement(
						"UPDATE crc_schema.tlogin SET session_id=?,refreshed=?,specialist_id=?::uuid,login=?,status=? "
								+ "WHERE session_id=?::uuid RETURNING session_id;--",
						PreparedStatement.RETURN_GENERATED_KEYS);
				preStatement.setObject(1, UUID.randomUUID());
				preStatement.setTimestamp(2, loginTime);
				preStatement.setString(3, specialistID);
				preStatement.setTimestamp(4, loginTime);
				preStatement.setInt(5, VvEnums.ACTIVE.getValue());
				preStatement.setString(6, returnedSession); // returnedSession
				preStatement.executeUpdate();
				resultSet = preStatement.getGeneratedKeys();
				while (resultSet != null && resultSet.next()) {
					_returnedUserData.setSessionId(resultSet.getString("session_id"));
				}
				/*
				 * if (returnedSession == null || returnedSession == "") { throw
				 * faultAsAuthorizedEvent(12350, crcData); }
				 */
				/*
				 * if (resultSet.equals(null) ||
				 * _returnedUserData.getSessionId().isEmpty() ||
				 * _returnedUserData.getSessionId().equals(null)) { throw
				 * faultAsAuthorizedEvent(12351, crcData); }
				 */
			}
		} catch (SQLException ex) {
			logger.fatal(ex.getMessage(), ex);
			System.out.println(ex);
		} finally {
			closeConnection(conn, resultSet, preStatement);
		}
		return _returnedUserData;
	}

	/*
	 * CreateAbnormalConfirmation - 3.59 - returns RequestID
	 */
	@Override
	public long createAbnormalConfirmation(CrcData crcData, String numeroIdentificacion, String tipoIdentificacion,
			String secretaryUsername, String note, List<String> documents) throws VvException {
		logger.info("Executing operation saveImagesProcess in VvamirWSImpl");
		long requestId = VvEnums.RESPONSE_BAD.getValue();
		Connection conn = null;
		ResultSet resultSet = null;
		PreparedStatement preStatement = null;
		Gson _gson = new Gson();
		try {
			conn = dataSource.getConnection();
			if (!validateCrc(conn, crcData)) {
				// crcData.setSessionId(returnedSession);
				throw faultAsAuthorizedEvent(12009, crcData);
			}
			preStatement = conn.prepareStatement(
					"INSERT INTO crc_schema.tabnormal (num_ident,tipo_ident,secretary_user,note,documents,crc_id) values(?,?,?,?,?::json,(SELECT crc_id FROM crc_schema.tcrc WHERE crc_user=? AND crc_pass=?)) RETURNING request_id");
			preStatement.setString(1, numeroIdentificacion);
			preStatement.setString(2, tipoIdentificacion);
			preStatement.setString(3, secretaryUsername);
			preStatement.setString(4, note);
			preStatement.setObject(5, _gson.toJson(documents));
			preStatement.setString(6, crcData.getCrcUser());
			preStatement.setString(7, crcData.getCrcPass());
			resultSet = preStatement.executeQuery();
			while (resultSet != null && resultSet.next()) {
				requestId = resultSet.getLong("request_id");
			}
			if (requestId == VvEnums.RESPONSE_BAD.getValue()) {
				// crcData.setSessionId(returnedSession);
				throw faultAsAuthorizedEvent(12335, crcData);
			}
		} catch (SQLException ex) {
			logger.fatal(ex.getMessage(), ex);
			throw new RuntimeException(ex);
		} finally {
			closeConnection(conn, resultSet, preStatement);
		}
		return requestId;
	}

	/*
	 * checkAbnormalConfirmation - return status of abnormal record
	 */
	@Override
	public AbnormalRequest checkAbnormalConfirmation(CrcData crcData, long numberID) throws VvException {
		logger.info("Executing operation checkAbnormalConfirmation in VvamirWSImpl");
		Connection conn = null;
		ResultSet resultSet = null;
		PreparedStatement preStatement = null;
		AbnormalRequest abrormalRequest = null;
		GregorianCalendar gregorianCalendar = null;
		XMLGregorianCalendar xmlGregorianCalendar = null;
		try {
			conn = dataSource.getConnection();
			if (!validateCrc(conn, crcData)) {
				// crcData.setSessionId(returnedSession);
				throw faultAsAuthorizedEvent(12010, crcData);
			}
			preStatement = conn.prepareStatement(
					"SELECT * FROM crc_schema.tabnormal WHERE tabnormal.num_ident =? ORDER BY request_id DESC LIMIT 1");
			preStatement.setLong(1, numberID);
			resultSet = preStatement.executeQuery();
			while (resultSet != null && resultSet.next()) {
				gregorianCalendar = new GregorianCalendar();
				abrormalRequest = new AbnormalRequest();
				abrormalRequest.setLeftFinger(resultSet.getString("left_finger"));
				abrormalRequest.setRightFinger(resultSet.getString("right_finger"));
				abrormalRequest.setNumIdent(resultSet.getString("num_ident"));
				abrormalRequest.setTipoIdent(resultSet.getString("tipo_ident"));
				abrormalRequest.setStatus(resultSet.getInt("status"));
				gregorianCalendar.setTime(resultSet.getTimestamp("approved_time"));
				xmlGregorianCalendar = DatatypeFactory.newInstance().newXMLGregorianCalendar(gregorianCalendar);
				abrormalRequest.setStatusTime(xmlGregorianCalendar);
			}
			if (abrormalRequest.equals(null) || abrormalRequest == null) {
				throw faultAsAuthorizedEvent(12336, crcData);
			}
		} catch (SQLException | DatatypeConfigurationException ex) {
			logger.fatal(ex.getMessage(), ex);
			throw new RuntimeException(ex);
		} finally {
			closeConnection(conn, resultSet, preStatement);
		}
		return abrormalRequest;
	}

	/*
	 * GetClinicUserList - 3.58.2
	 */
	@Override
	public List<SpecialistData> getClinicUserList(CrcData crcData) throws VvException {
		logger.info("Executing operation getClinicUserList in VvamirWSImpl");
		List<SpecialistData> _userList = null;
		SpecialistData _specialist = null;
		Connection conn = null;
		ResultSet resultSet = null;
		PreparedStatement preStatement = null;
		String userSession = null;
		int crcOrClinit = VvEnums.DEFAULT.getValue();

		GregorianCalendar gregorianCalendar = null;
		XMLGregorianCalendar xmlGregorianCalendar = null;
		/*
		 * CHECKS USER SESSION LOGIN
		 */
		try {
			conn = dataSource.getConnection();
			preStatement = conn.prepareStatement(
					"SELECT location_type FROM crc_schema.tcrc WHERE crc_id =(SELECT crc_id FROM crc_schema.tcrc WHERE crc_user=? AND crc_pass=?)");
			preStatement.setString(1, crcData.getCrcUser());
			preStatement.setString(2, crcData.getCrcPass());
			resultSet = preStatement.executeQuery();
			while (resultSet != null && resultSet.next()) {
				crcOrClinit = resultSet.getInt("location_type");
			}
			// Manager Certificatory
			if (crcOrClinit == VvEnums.CERTIFICATORY_SESSION.getValue()) {
				userSession = checkSessionCode(conn, crcData, VvEnums.CERTIFICATORY_SESSION.getValue());
			}
			// Manager Secretary
			else {
				userSession = checkSessionCode(conn, crcData, VvEnums.SECRETARY_SESSION.getValue());
			}
			if (userSession == null || userSession.isEmpty() || userSession.equals(null) || userSession == "") {
				crcData.setSessionId(userSession);
				throw faultAsAuthorizedEvent(12353, crcData);
			}
			if (!validateCrc(conn, crcData)) {
				crcData.setSessionId(userSession);
				throw faultAsAuthorizedEvent(12011, crcData);
			}
			closeConnection(null, resultSet, preStatement);
			preStatement = conn.prepareStatement(
					"SELECT * FROM crc_schema.tpeople WHERE crc_id IN (SELECT crc_id FROM crc_schema.tpeople WHERE specialist_id = "
							+ "(SELECT specialist_id FROM crc_schema.tlogin WHERE session_id=?::uuid)) AND tpeople.status <>'2'");
			preStatement.setString(1, userSession);
			resultSet = preStatement.executeQuery();
			_userList = new ArrayList<SpecialistData>();
			while (resultSet != null && resultSet.next()) {
				gregorianCalendar = new GregorianCalendar();
				_specialist = new SpecialistData();
				_specialist.setStatus(resultSet.getInt("status"));
				_specialist.setFirstName(resultSet.getString("first_name"));
				_specialist.setLastName(resultSet.getString("last_name"));
				_specialist.setLeftFinger(resultSet.getString("left_finger"));
				_specialist.setMiddleName(resultSet.getString("middle_name"));
				_specialist.setSecondName(resultSet.getString("second_name"));
				_specialist.setEmail(resultSet.getString("email"));
				_specialist.setTel(resultSet.getString("tel"));
				_specialist.setMobile(resultSet.getString("mobile"));
				gregorianCalendar.setTime(resultSet.getTimestamp("birth_date"));
				xmlGregorianCalendar = DatatypeFactory.newInstance().newXMLGregorianCalendar(gregorianCalendar);
				_specialist.setBirthDate(xmlGregorianCalendar);
				_specialist.setEpsArs(resultSet.getInt("eps_ars"));
				_specialist.setNumIdent(resultSet.getString("num_ident"));
				_specialist.setTipoIdent(resultSet.getString("tipo_ident"));
				// gregorianCalendar.setTime(resultSet.getTimestamp("status_time"));
				// xmlGregorianCalendar =
				// DatatypeFactory.newInstance().newXMLGregorianCalendar(gregorianCalendar);
				// _specialist.setStatusTime(xmlGregorianCalendar);
				gregorianCalendar.setTime(resultSet.getTimestamp("reg_date"));
				xmlGregorianCalendar = DatatypeFactory.newInstance().newXMLGregorianCalendar(gregorianCalendar);
				_specialist.setRegDate(xmlGregorianCalendar);
				_specialist.setSex(resultSet.getString("sexo"));
				_specialist.setRightFingure(resultSet.getString("right_finger"));
				_specialist.setRole(resultSet.getString("role"));
				_specialist.setPhotograph(resultSet.getString("photograph"));
				_specialist.setUsername(resultSet.getString("username"));
				_specialist.setPassword(resultSet.getString("password"));
				_userList.add(_specialist);
			}
			if (_userList.isEmpty() || _userList.equals(null)) {
				throw faultAsAuthorizedEvent(12340, crcData);
			}
		} catch (SQLException | DatatypeConfigurationException ex) {
			logger.fatal(ex.getMessage(), ex);
			throw new RuntimeException(ex);
		} finally {
			closeConnection(conn, resultSet, preStatement);
		}
		return _userList;
	}

	@Override
	public int hwRegistration(CrcHw hwCrc) throws VvException {
		logger.info("Executing operation hwRegistration in VvamirWSImpl");
		int response = VvEnums.RESPONSE_OK.getValue();
		Connection conn = null;
		ResultSet resultSet = null;
		PreparedStatement preStatement = null;
		Calendar calendar = Calendar.getInstance();
		Date now = calendar.getTime();
		Timestamp loginTime = new Timestamp(now.getTime());
		boolean found = false;
		try {
			CrcData crcData = new CrcData();
			crcData.setCrcUser(hwCrc.getCrcUser());
			crcData.setCrcPass(hwCrc.getCrcPass());
			crcData.setCrcLatitude(hwCrc.getCrcLatitude());
			crcData.setCrcLongtitude(hwCrc.getCrcLongtitude());
			conn = dataSource.getConnection();
			if (!validateCrc(conn, hwCrc)) {
				throw faultAsWarningEvent(12025, crcData);
			}

			preStatement = conn.prepareStatement("SELECT app_key_code FROM crc_schema.tcrc_devices");
			resultSet = preStatement.executeQuery();
			while (resultSet != null && resultSet.next()) {
				if (hwCrc.getKey().equals(resultSet.getString("app_key_code"))) {
					found = true;
				}
			}
			if (found) {
				closeConnection(null, resultSet, preStatement);
				preStatement = conn.prepareStatement("UPDATE crc_schema.tcrc_devices SET state=? WHERE signature=?");
				preStatement.setInt(1, VvEnums.ACTIVE.getValue());
				preStatement.setString(2, hwCrc.getSignature());
				preStatement.execute();
				closeConnection(null, resultSet, preStatement);
				preStatement = conn.prepareStatement(
						"UPDATE crc_schema.tcrc_devices SET state=?,device_type=?,signature=?,serial_number=?,room=?,reg_date=?,crc_id=(SELECT crc_id FROM crc_schema.tcrc WHERE crc_user=? AND crc_pass=?) WHERE app_key_code=?");
				preStatement.setInt(1, VvEnums.ACTIVE.getValue());
				preStatement.setString(2, hwCrc.getDeviceType());
				preStatement.setString(3, hwCrc.getSignature());
				preStatement.setString(4, hwCrc.getSerialNumber());
				preStatement.setString(5, hwCrc.getRoom());
				preStatement.setTimestamp(6, loginTime);
				preStatement.setString(7, hwCrc.getCrcUser());
				preStatement.setString(8, hwCrc.getCrcPass());
				preStatement.setString(9, hwCrc.getKey());
				if (preStatement.execute()) {
					throw faultAsErrorEvent(12341, crcData);
				}
			}
			if (!found) {
				throw faultAsErrorEvent(12025, crcData);
			}
		} catch (SQLException ex) {
			logger.fatal(ex.getMessage(), ex);
			throw new RuntimeException(ex);
		} finally {
			closeConnection(conn, resultSet, preStatement);
		}
		return response;
	}

	@Override
	public boolean isAlive(CrcData crcData, int request) throws VvException {
		logger.info("Executing operation isAlive in VvamirWSImpl");
		Connection conn = null;
		ResultSet resultSet = null;
		PreparedStatement preStatement = null;
		boolean loginUpdated = false;
		String userSession = "";
		Calendar calendar = Calendar.getInstance();
		Date now = calendar.getTime();
		Timestamp nowTime = new Timestamp(now.getTime());
		Timestamp lastTime = null;
		String configAvailableTime = "";
		BigInteger firstTime;
		BigInteger secondTime;
		BigInteger diffTime;
		try {
			conn = dataSource.getConnection();
			if (!validateCrc(conn, crcData)) {
				throw faultAsWarningEvent(12024, crcData);
			}
			userSession = checkSessionCode(conn, crcData, VvEnums.SECRETARY_SESSION.getValue());
			switch (request) {
			// MA NISHMA ? - calculate difference time between now
			// and last
			// login
			case 0:
				preStatement = conn.prepareStatement(
						"SELECT refreshed,val FROM crc_schema.tlogin,crc_schema.tconfig WHERE param=? AND WHERE session_id=?::uuid AND status=?");
				preStatement.setString(1, "login_timeout");
				preStatement.setString(2, userSession);
				preStatement.setInt(3, VvEnums.ACTIVE.getValue());
				resultSet = preStatement.executeQuery();
				while (resultSet != null && resultSet.next()) {
					lastTime = resultSet.getTimestamp("refreshed");
					configAvailableTime = resultSet.getString("val");
				}
				BigInteger ONE_BILLION = new BigInteger("1000000000");
				firstTime = BigInteger.valueOf(nowTime.getTime() / 1000 * 1000).multiply(ONE_BILLION)
						.add(BigInteger.valueOf(nowTime.getNanos()));
				secondTime = BigInteger.valueOf(resultSet.getTimestamp("refreshed").getTime() / 1000 * 1000)
						.multiply(ONE_BILLION).add(BigInteger.valueOf(lastTime.getNanos()));
				diffTime = firstTime.subtract(secondTime);
				BigInteger configTime = new BigInteger(configAvailableTime);
				int res;
				res = configTime.compareTo(diffTime);

				if (res == 1) {

				}

				if (res == 1 || res == 0) {

				}
				break;
			// AKOL TOV
			case 1:
				preStatement = conn.prepareStatement(
						"UPDATE crc_schema.tlogin SET refreshed=? WHERE session_id=?::uuid AND status=?");
				preStatement.setObject(1, lastTime);
				preStatement.setString(2, userSession);
				preStatement.setInt(3, VvEnums.ACTIVE.getValue());
				if (preStatement.executeUpdate() == VvEnums.UPDATED.getValue()) {
					loginUpdated = true;
				}
				break;
			}
		} catch (SQLException ex) {
			logger.fatal(ex.getMessage(), ex);
			throw new RuntimeException(ex);
		} finally {
			closeConnection(conn, resultSet, preStatement);
		}
		return loginUpdated;
	}

	@Override
	public String getLoginSession(LoginData loginData) throws VvException {

		logger.info("Executing operation getLoginSession in VvamirWSImpl");
		String returned = "";
		Connection conn = null;
		ResultSet resultSet = null;
		PreparedStatement preStatement = null;
		String returnedAppKey = null;
		boolean appKeyPresents = false;
		boolean initialized = false;
		try {
			CrcData crcData = new CrcData();
			crcData.setCrcUser(loginData.getCrcUser());
			crcData.setCrcPass(loginData.getCrcPass());
			crcData.setCrcLatitude(loginData.getCrcLatitude());
			crcData.setCrcLongtitude(loginData.getCrcLongtitude());
			conn = dataSource.getConnection();

			if (!validateCrc(conn, loginData)) {
				throw faultAsWarningEvent(12001, crcData);
			}
			// RESELECT SESSION ID THAT INITIALIZED BEFORE FOR THE CRC APP
			preStatement = conn
					.prepareStatement("SELECT tlogin.status,tlogin.session_id,tcrc_devices.app_key_code,tcrc.crc_id "
							+ "FROM crc_schema.tlogin " + "RIGHT JOIN crc_schema.tcrc_devices "
							+ "ON crc_schema.tcrc_devices.app_key_code = crc_schema.tlogin.app_key_code "
							+ "JOIN crc_schema.tcrc ON crc_schema.tcrc_devices.crc_id = crc_schema.tcrc.crc_id "
							+ "WHERE tlogin.status=? AND tlogin.session_id IS NOT NULL "
							+ "AND tcrc.crc_user=? AND tcrc.crc_pass=? " + "AND tlogin.app_key_code=?");
			preStatement.setObject(1, VvEnums.DISABLED.getValue());
			preStatement.setObject(2, loginData.getCrcUser());
			preStatement.setObject(3, loginData.getCrcPass());
			preStatement.setObject(4, loginData.getKeyCode());
			resultSet = preStatement.executeQuery();
			while (resultSet != null && resultSet.next()) {
				returned = resultSet.getString("session_id");
				initialized = true;
			}
			closeConnection(null, resultSet, preStatement);
			preStatement = conn.prepareStatement(
					"SELECT app_key_code FROM crc_schema.tcrc_devices WHERE crc_id=(SELECT crc_id FROM crc_schema.tcrc WHERE crc_user=? AND crc_pass=?) AND app_key_code=?");
			preStatement.setObject(1, loginData.getCrcUser());
			preStatement.setObject(2, loginData.getCrcPass());
			preStatement.setObject(3, loginData.getKeyCode());
			resultSet = preStatement.executeQuery();
			while (resultSet != null && resultSet.next()) {
				returnedAppKey = resultSet.getString("app_key_code");
				if (returnedAppKey.equals(loginData.getKeyCode())) {
					appKeyPresents = true;
				}
			}
			if (!appKeyPresents) {
				throw faultAsErrorEvent(12342, crcData);
			}
			if (!initialized) {
				if (appKeyPresents) {
					closeConnection(null, resultSet, preStatement);
					preStatement = conn.prepareStatement(
							"INSERT INTO crc_schema.tlogin (session_id,app_key_code,status,crc_id) values(?,?,?,(SELECT crc_id FROM crc_schema.tcrc WHERE crc_user=? AND crc_pass=?)) RETURNING session_id");
					preStatement.setObject(1, UUID.randomUUID());
					preStatement.setObject(2, loginData.getKeyCode());
					preStatement.setObject(3, VvEnums.DISABLED.getValue());
					preStatement.setString(4, loginData.getCrcUser());
					preStatement.setString(5, loginData.getCrcPass());
					resultSet = preStatement.executeQuery();
					while (resultSet != null && resultSet.next()) {
						returned = resultSet.getString("session_id");
					}
				}
			}
			if (returned == "" || returned.isEmpty()) {
				throw faultAsErrorEvent(12343, crcData);
			}
		} catch (SQLException ex) {
			logger.fatal(ex.getMessage(), ex);
			throw new RuntimeException(ex);
		} finally {
			closeConnection(conn, resultSet, preStatement);
		}
		return returned;

	}

	/*
	 * seleccionarResultadosPruebas
	 */

	@Override
	public PruebasData seleccionarResultadosPruebas(InitialCrcData crcData, long processId) throws VvException {
		logger.info("Executing operation getClinicUserList in VvamirWSImpl");
		// MAIN
		PruebasData pruebasData = null;
		ProcessData _processData = null;
		SpecialistData _specialistData = null;
		ClinicData _clinicData = null;
		SpecialistsTest _specialistTest = null;
		ArrayList<SpecialistsTest> helpTestsList = null;
		String processStatus = "";
		Connection conn = null;
		ResultSet resultSet = null;
		PreparedStatement preStatement = null;
		GregorianCalendar gregorianCalendar = null;
		XMLGregorianCalendar xmlGregorianCalendar = null;
		long organizationId = VvEnums.DISABLED.getValue();
		long processOrganization = VvEnums.DISABLED.getValue();

		/*
		 * CHECKS USER SESSION LOGIN
		 */
		try {
			conn = dataSource.getConnection();
			if (!validateCrc(conn, crcData)) {
				throw faultAsWarningEvent(12024, crcData);
			}

			/*
			 * CHECK IF USER BELONGS TO ORGANIZATION WHERE PROCESS DOES
			 */
			preStatement = conn.prepareStatement(
					"SELECT tcrc.organization_id FROM crc_schema.tcrc WHERE crc_user=? AND tcrc.crc_pass=?");
			preStatement.setString(1, crcData.getCrcUser());
			preStatement.setString(2, crcData.getCrcPass());
			resultSet = preStatement.executeQuery();
			while (resultSet != null && resultSet.next()) {
				organizationId = resultSet.getLong("organization_id");
			}
			if (organizationId == 0) {
				// Regular CRC Authentication fault
				throw faultAsErrorEvent(12024, crcData);
			}
			closeConnection(null, resultSet, preStatement);
			preStatement = conn.prepareStatement("SELECT tprocess.estado AS process_status,"
					+ "tprocess.certificator_id,tprocess.certificador_ver,tprocess.fec_certification," + "tpeople.role,"
					+ "tpeople.first_name," + "tpeople.last_name," + "tpeople.second_name," + "tpeople.middle_name,"
					+ "tcrc.municipal_location," + "tcrc.address," + "tcrc.tel AS crc_tel," + "tcrc.email AS crc_mail,"
					+ "tcrc.crc_name," + "tcrc.crc_id," + "tcrc.organization_id," + "ttest.start_time,"
					+ "ttest.end_time,ttest.questions_result," + "ttest.observations," + "ttest.specialist_id,"
					+ "ttest.result AS test_result," + "ttest.estado AS test_status " + "FROM crc_schema.ttest "
					+ "JOIN crc_schema.tprocess ON tprocess.process_id = ttest.process_id " + "JOIN crc_schema.tpeople "
					+ "ON ttest.specialist_id = tpeople.specialist_id " + "JOIN crc_schema.tcrc "
					+ "ON tcrc.crc_id = tpeople.crc_id WHERE ttest.process_id =? ");
			preStatement.setLong(1, processId);
			resultSet = preStatement.executeQuery();
			helpTestsList = new ArrayList<SpecialistsTest>();
			String sertificatorId = "";
			while (resultSet != null && resultSet.next()) {
				processOrganization = resultSet.getInt("organization_id");
				processStatus = resultSet.getString("process_status");
				gregorianCalendar = new GregorianCalendar();
				_specialistData = new SpecialistData();
				_processData = new ProcessData();
				sertificatorId = resultSet.getString("certificator_id");
				if (sertificatorId != null) {
					_processData.setCerificadorId(sertificatorId);
					_processData.setCertificadorVerificiationValue(resultSet.getInt("certificador_ver"));
					gregorianCalendar.setTime(resultSet.getTimestamp("fec_certification"));
					xmlGregorianCalendar = DatatypeFactory.newInstance().newXMLGregorianCalendar(gregorianCalendar);
					_processData.setFechaCertification(xmlGregorianCalendar);
				}
				_processData.setProcessEstado(processStatus);
				_specialistData.setSpecialistId(resultSet.getString("specialist_id"));
				_specialistData.setCrcId(resultSet.getLong("crc_id"));
				_specialistData.setRole(resultSet.getString("role"));
				_specialistData.setFirstName(resultSet.getString("first_name"));
				_specialistData.setLastName(resultSet.getString("last_name"));
				_specialistData.setMiddleName(resultSet.getString("middle_name"));
				_specialistData.setSecondName(resultSet.getString("second_name"));
				_clinicData = new ClinicData();
				_clinicData.setAddress(resultSet.getString("address"));
				_clinicData.setCrcName(resultSet.getString("crc_name"));
				_clinicData.setEmail(resultSet.getString("crc_mail"));
				_clinicData.setMunicipalLocation(resultSet.getString("municipal_location"));
				_clinicData.setTelephone(resultSet.getString("crc_tel"));
				_specialistTest = new SpecialistsTest();
				gregorianCalendar.setTime(resultSet.getTimestamp("start_time"));
				xmlGregorianCalendar = DatatypeFactory.newInstance().newXMLGregorianCalendar(gregorianCalendar);
				_specialistTest.setStartTime(xmlGregorianCalendar);
				gregorianCalendar.setTime(resultSet.getTimestamp("end_time"));
				xmlGregorianCalendar = DatatypeFactory.newInstance().newXMLGregorianCalendar(gregorianCalendar);
				_specialistTest.setEndTime(xmlGregorianCalendar);
				_specialistTest.setStatus(resultSet.getInt("test_status"));
				_specialistTest.setResult(resultSet.getInt("test_result"));
				_specialistTest.setObservations(resultSet.getString("observations"));
				_specialistTest.setJsonExamenResults(resultSet.getString("questions_result"));
				_specialistTest.setSpecialist(_specialistData);
				_specialistTest.setClinicData(_clinicData);
				_specialistTest.setProcessData(_processData);
				helpTestsList.add(_specialistTest);
			}
			if (resultSet == null || resultSet.equals(null)) {
				throw faultAsErrorEvent(12354, crcData);
			}
			pruebasData = new PruebasData();
			pruebasData.setSpecialistsTestList(helpTestsList);
			if (organizationId != processOrganization) {
				// Provided process belongs to another Organization
				throw faultAsWarningEvent(12513, crcData);
			}
			if (!processStatus.equals(ProcessStatus.VERPRB.name())) {
				throw faultAsWarningEvent(12514, crcData);
			}

		} catch (SQLException | DatatypeConfigurationException ex) {
			logger.fatal(ex.getMessage(), ex);
			throw new RuntimeException(ex);
		} finally {
			closeConnection(conn, resultSet, preStatement);
		}
		return pruebasData;
	}

	@Override
	public SpecialistData superUserLogin(CrcData crcData, String username, String password) throws VvException {
		DataSource socDataSource = null;
		InitialContext initialContext = null;
		Connection socConn = null;

		try {
			initialContext = new InitialContext();
			socDataSource = (DataSource) initialContext.lookup("java:/PostgresDS/SOC");
		} catch (NamingException ex) {
			logger.fatal(ex.getMessage(), ex);
		}
		Connection conn = null;
		ResultSet resultSet = null;
		PreparedStatement preStatement = null;
		SpecialistData _returnedUserData = null;
		boolean userFound = false;
		String returnedSession = "";
		Calendar calendar = Calendar.getInstance();
		Date now = calendar.getTime();
		Timestamp loginTime = new Timestamp(now.getTime());
		String userSession = "";
		String specialistID = "";
		int crcOrClinit = 3;
		String returnedPassword = "";
		String returnedEmail = "";
		long crcId = VvEnums.DEFAULT.getValue();

		try {

			socConn = socDataSource.getConnection();
			preStatement = socConn.prepareStatement("SELECT email,password FROM users WHERE email=?");
			preStatement.setString(1, username);
			while (resultSet != null && resultSet.next()) {
				returnedPassword = resultSet.getString("email");
				returnedEmail = resultSet.getString("password");
			}
			if (returnedEmail == "" || returnedEmail == null || returnedPassword == "" || returnedPassword == null) {
				System.out.println("<<<<  SOCCIST NOT FOUND >>>>");
			}
			// String entered = BCrypt.hashpw(password, salt);

			// if (BCrypt.checkpw(hashedPassword, entered)) {
			// System.out.println("It matches");
			// } else {
			// System.out.println("It does not match");
			// }
			closeConnection(socConn, resultSet, preStatement);
			conn = dataSource.getConnection();
			/* SESSION CHECK */
			// Validation CRC FAULT
			if (!validateCrc(conn, crcData)) {
				crcData.setSessionId(userSession);
				throw faultAsAuthorizedEvent(12008, crcData);
			}
			preStatement = conn.prepareStatement(
					"SELECT location_type,crc_id FROM crc_schema.tcrc WHERE crc_id =(SELECT crc_id FROM crc_schema.tcrc WHERE crc_user=? AND crc_pass=?)");
			preStatement.setString(1, crcData.getCrcUser());
			preStatement.setString(2, crcData.getCrcPass());
			resultSet = preStatement.executeQuery();
			while (resultSet != null && resultSet.next()) {
				crcOrClinit = resultSet.getInt("location_type");
				crcId = resultSet.getLong("crc_id");
			}
			// Validation CRC FAULT
			if (crcOrClinit == 3) {
				crcData.setSessionId(returnedSession);
				throw faultAsAuthorizedEvent(12028, crcData);
			}
			// Manager Certificatory
			else if (crcOrClinit == VvEnums.CERTIFICATORY_SESSION.getValue()) {
				returnedSession = checkSessionCode(conn, crcData, VvEnums.CERTIFICATORY_SESSION.getValue());
			}
			// Manager Secretary
			else if (crcOrClinit == VvEnums.SECRETARY_SESSION.getValue()) {
				returnedSession = checkSessionCode(conn, crcData, VvEnums.SECRETARY_SESSION.getValue());
			}

			if (returnedSession == "" || returnedSession == null) {
				crcData.setSessionId(returnedSession);
				throw faultAsAuthorizedEvent(12364, crcData);
			}
			closeConnection(null, resultSet, preStatement);
			preStatement = conn.prepareStatement(
					"SELECT * FROM crc_schema.tpeople WHERE tpeople.role=?::uuid AND tpeople.crc_id=?");
			preStatement.setString(1, "a43e3383-0f42-4111-1245-6aa8c7b87110");
			preStatement.setLong(2, crcId);
			resultSet = preStatement.executeQuery();
			while (resultSet != null && resultSet.next()) {
				_returnedUserData = new SpecialistData();
				_returnedUserData.setUsername(resultSet.getString("username"));
				_returnedUserData.setSpecialistId(resultSet.getString("specialist_id"));
				_returnedUserData.setPhotograph(resultSet.getString("photograph"));
				_returnedUserData.setFirstName(resultSet.getString("first_name"));
				_returnedUserData.setLastName(resultSet.getString("last_name"));
				_returnedUserData.setLeftFinger(resultSet.getString("left_finger"));
				_returnedUserData.setRightFingure(resultSet.getString("right_finger"));
				_returnedUserData.setRole(resultSet.getString("role"));
				specialistID = resultSet.getString("specialist_id");
				userFound = true;
			}
			if (!userFound) {
				crcData.setSessionId(returnedSession);
				throw faultAsAuthorizedEvent(12330, crcData);
			}
			if (userFound) {
				closeConnection(null, resultSet, preStatement);
				// logout previous session login
				preStatement = conn
						.prepareStatement("UPDATE crc_schema.tlogin SET status=?,logout=? WHERE specialist_id=?::uuid");
				preStatement.setInt(1, VvEnums.DELETED.getValue());
				preStatement.setTimestamp(2, loginTime);
				preStatement.setString(3, specialistID);
				preStatement.executeUpdate();
				closeConnection(null, resultSet, preStatement);
				preStatement = conn.prepareStatement(
						"UPDATE crc_schema.tlogin SET session_id=?,refreshed=?,specialist_id=?::uuid,login=?,status=? "
								+ "WHERE session_id=?::uuid RETURNING session_id;--",
						PreparedStatement.RETURN_GENERATED_KEYS);
				preStatement.setObject(1, UUID.randomUUID());
				preStatement.setTimestamp(2, loginTime);
				preStatement.setString(3, specialistID);
				preStatement.setTimestamp(4, loginTime);
				preStatement.setInt(5, VvEnums.ACTIVE.getValue());
				preStatement.setString(6, returnedSession); // returnedSession
				preStatement.executeUpdate();
				resultSet = preStatement.getGeneratedKeys();
				while (resultSet != null && resultSet.next()) {
					_returnedUserData.setSessionId(resultSet.getString("session_id"));
				}
				/*
				 * if (returnedSession == null || returnedSession == "") { throw
				 * faultAsAuthorizedEvent(12350, crcData); }
				 */
				/*
				 * if (resultSet.equals(null) ||
				 * _returnedUserData.getSessionId().isEmpty() ||
				 * _returnedUserData.getSessionId().equals(null)) { throw
				 * faultAsAuthorizedEvent(12351, crcData); }
				 */
			}
		} catch (SQLException ex) {
			logger.fatal(ex.getMessage(), ex);
			System.out.println(ex);
		} finally {
			closeConnection(conn, resultSet, preStatement);
		}
		return _returnedUserData;
	}
}
